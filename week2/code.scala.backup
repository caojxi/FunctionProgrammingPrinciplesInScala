def sum(f: Int => Int, a: Int, b: Int) = {
  if (a > b) 0
  else f(a) + sum(f, a + 1, b)
}

def fact = product(x => x, 0, b)

def sumTailRecursion(f: Int => Int, a: Int, b: Int) = {
  def loop(a: Int, acc: Int): Int =
    if a > b acc
    else loop(a + 1, acc + f(a))

  loop(a, 0)
}

def sum(f: Int => Int): (Int, Int) => Int = {
  def sumF(a: Int, b: Int): Int =
    if (a > b) 0
    else f(a) + sumF(a + 1, b)

  sumF
}

def sum(f: Int)(a: Int, b: Int): Int =
  if (a > b) 0
  else f(a) + sum(f)(a + 1, b)

def product(f: Int => Int, a: Int, b: Int) {
  if (a > b) 1
  else f(a) * product(f)(a + 1, b)
}

def mapReduce(f: Int => Int, combine: (Int, Int) => Int, zero: Int)(a: Int, b: int): Int = {
  if (a > b) zero
  else combine(f(a), mapReduce(f, combine, zero)(a + 1, b))
}

def sum(f: Int => Int)(a: Int, b: Int): Int = mapReduce(f, (x, y) => x + y, 0)(a, b)

def product(f: Int => Int)(a: Int, b: Int): Int = mapReduce(f, (x, y) => x * y, 1)(a, b)

def fact = product(x => x)(0, b)

val tolerance = 0.0001

def isCloseEnough(x: Double, y: Double) =
  abs((x - y) / x)  / x < tolerance

def fixedPoint(f: Double => Double)(firstGuess: Double) = {
  def iterate(guess: Double): Double = {
    val next = f(guess)

    if (isCloseEnough(guess, next)) next
    else iterate(next)
  }

  iterate(firstGuess)
}

def sqrt(x: Double) = fixedPoint(y => (y + x / y) / 2)(1.0)

def averageDump(f: Double)(x: Double) = (x + f(x)) / 2

def sqrt(x: Double) = fixedPoint(averageDump(y => x / y))(1.0)
